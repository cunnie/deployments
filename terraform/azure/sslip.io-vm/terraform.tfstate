{
  "version": 4,
  "terraform_version": "1.6.3",
  "serial": 155,
  "lineage": "5ac25dfb-852e-1ed4-aa12-8351dbf9487c",
  "outputs": {
    "admin_password": {
      "value": "Aa1_5g8PFBVI",
      "type": "string"
    },
    "public_ip": {
      "value": "52.187.42.158",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "cloudinit_config",
      "name": "sslip_io",
      "provider": "provider[\"registry.terraform.io/hashicorp/cloudinit\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": true,
            "boundary": "MIMEBOUNDARY",
            "gzip": true,
            "id": "400152784",
            "part": [
              {
                "content": "#!/bin/bash -x\n\n# This script is meant to be an idempotent script (you can run it multiple\n# times in a row).\n\n# This script is meant to be run by the root user (via Azure's cloud-init /\n# terraform's custom_data) with no ssh key, no USER or HOME variable, and also\n# be run by user cunnie, with ssh keys and environment variables set.\n\n# Output is in /var/log/cloud-init-output.log\n\nset -xeu -o pipefail\n\ninstall_packages() {\n  sudo apt-get update\n  export DEBIAN_FRONTEND=noninteractive\n  sudo apt-get -y upgrade\n  sudo apt-get remove -y chrony || true\n  sudo apt-get install -y \\\n    bat \\\n    build-essential \\\n    direnv \\\n    fasd \\\n    fd-find \\\n    git \\\n    git-lfs \\\n    golang \\\n    jq \\\n    lastpass-cli \\\n    lua5.4 \\\n    neovim \\\n    nginx \\\n    nodejs \\\n    ntpsec \\\n    python3 \\\n    python3-dev \\\n    python3-pip \\\n    ripgrep \\\n    ruby \\\n    silversearcher-ag \\\n    socat \\\n    tcpdump \\\n    tree \\\n    unzip \\\n    yarnpkg \\\n    zsh \\\n    zsh-syntax-highlighting \\\n\n  # the following repo only works on amd64 architectures\n  if ! grep grml /etc/apt/sources.list; then\n    echo \"deb     http://deb.grml.org/ grml-stable  main\" | sudo tee -a /etc/apt/sources.list\n    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 21E0CA38EA2EA4AB\n    sudo apt-get update\n    sudo apt-get install -y \\\n\t    zsh-lovers\n  fi\n}\n\ncreate_user_cunnie() {\n  if ! id cunnie; then\n    sudo adduser \\\n      --shell=/usr/bin/zsh \\\n      --gecos=\"Brian Cunnie\" \\\n      --disabled-password \\\n      cunnie\n    for GROUP in root adm sudo www-data; do\n      sudo adduser cunnie $GROUP\n    done\n    echo \"cunnie ALL=(ALL) NOPASSWD:ALL\" | sudo tee /etc/sudoers.d/99-cunnie\n    sudo mkdir ~cunnie/.ssh\n    echo \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIWiAzxc4uovfaphO0QVC2w00YmzrogUpjAzvuqaQ9tD cunnie@nono.io \" | sudo tee -a ~cunnie/.ssh/authorized_keys\n    ssh-keyscan github.com | sudo tee -a ~cunnie/.ssh/known_hosts\n    sudo touch ~cunnie/.zshrc\n    sudo chmod -R go-rwx ~cunnie/.ssh\n    sudo git clone https://github.com/cunnie/bin.git ~cunnie/bin\n    sudo mkdir -p ~cunnie/.local/share # fixes `lpass login â†’ Error: No such file or directory: mkdir(/home/cunnie/.local/share/lpass)`\n    sudo chown -R cunnie:cunnie ~cunnie\n  fi\n}\n\ninstall_chruby() {\n  if [ ! -d /usr/local/share/chruby ] ; then\n    wget -O ruby-install-0.9.3.tar.gz \\\n      https://github.com/postmodern/ruby-install/releases/download/v0.9.3/ruby-install-0.9.3.tar.gz\n    tar -xzvf ruby-install-0.9.3.tar.gz\n    cd ruby-install-0.9.3/\n    sudo make install\n\n    wget -O chruby-0.3.9.tar.gz https://github.com/postmodern/chruby/archive/v0.3.9.tar.gz\n    tar -xzvf chruby-0.3.9.tar.gz\n    cd chruby-0.3.9/\n    sudo make install\n    cat \u003e\u003e $HOME/.zshrc \u003c\u003cEOF\n\nsource /usr/local/share/chruby/chruby.sh\nsource /usr/local/share/chruby/auto.sh\nEOF\n  fi\n}\n\ninstall_fly_cli() {\n  if [ ! -x /usr/local/bin/fly ]; then\n    curl -s -o /tmp/fly 'https://ci.nono.io/api/v1/cli?arch=amd64\u0026platform=linux'\n    sudo install /tmp/fly /usr/local/bin\n    sudo chmod a+w /usr/local/bin\n  fi\n}\n\ninstall_aws_cli() {\n  if [ ! -x /usr/local/bin/aws ]; then\n    # From https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html\n    curl \"https://awscli.amazonaws.com/awscli-exe-linux-${ARCH}.zip\" -o \"awscliv2.zip\"\n    unzip awscliv2.zip\n    sudo ./aws/install\n  fi\n}\n\ninstall_zsh_autosuggestions() {\n  if [ ! -d $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions ]; then\n      git clone https://github.com/zsh-users/zsh-autosuggestions $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions\n      sed -i 's/^plugins=(/\u0026zsh-autosuggestions /' $HOME/.zshrc\n  fi\n}\n\nconfigure_direnv() {\n  if ! grep -q \"direnv hook zsh\" $HOME/.zshrc; then\n    echo 'eval \"$(direnv hook zsh)\"' \u003e\u003e $HOME/.zshrc\n    eval \"$(direnv hook bash)\"\n  fi\n  for envrc in $(find \"$HOME/workspace\" -maxdepth 2 -name '.envrc' -print); do\n    pushd $(dirname $envrc)\n      direnv allow\n    popd\n  done\n}\n\nconfigure_zsh() {\n  if [ ! -d $HOME/.oh-my-zsh ]; then\n    sudo chsh -s /usr/bin/zsh $USER\n    echo \"\" | SHELL=/usr/bin/zsh zsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n    sed -i 's/robbyrussell/agnoster/' $HOME/.zshrc\n    echo 'eval \"$(fasd --init posix-alias zsh-hook)\"' \u003e\u003e $HOME/.zshrc\n    echo 'export EDITOR=nvim' \u003e\u003e $HOME/.zshrc\n  fi\n}\n\nuse_pacific_time() {\n  sudo timedatectl set-timezone America/Los_Angeles\n}\n\ndisable_selinux() {\n  # does not take effect until reboot, and we can't reboot halfway through the script\n  # because we can't easily pick up where we left off\n  if grep -q SELINUX=enforcing /etc/selinux/config; then\n    printf \"disabling SELINUX and firewall\"\n    sudo sed -i 's/^SELINUX=enforcing$/SELINUX=disabled/' /etc/selinux/config\n    # The following really, truly disables selinux\n    sudo grubby --update-kernel ALL --args selinux=0\n  fi\n}\n\nrsyslog_ignores_sslip() {\n  RSYSLOG_CONFIG=/etc/rsyslog.d/10-sslip.io.conf\n  if [ ! -f $RSYSLOG_CONFIG ]; then\n    sudo tee -a $RSYSLOG_CONFIG \u003c\u003cEOF\n# sslip.io-dns-server is too verbose, consumed 15G in /var/log\n# rely only on journalctl henceforth\n:programname, isequal, \"sslip.io-dns-server\" stop\nEOF\n    sudo systemctl restart syslog\n  fi\n}\n\nconfigure_git() {\n  # https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases\n  git config --global user.name \"Brian Cunnie\"\n  git config --global user.email brian.cunnie@gmail.com\n  git config --global alias.co checkout\n  git config --global alias.ci commit\n  git config --global alias.st status\n  git config --global color.branch auto\n  git config --global color.diff auto\n  git config --global color.status auto\n  git config --global core.editor nvim\n  git config --global url.\"git@github.com:\".insteadOf \"https://github.com/\"\n\n  mkdir -p $HOME/workspace # where we typically clone our repos\n}\n\nconfigure_sudo() {\n  sudo sed -i 's/# %wheel/%wheel/' /etc/sudoers\n}\n\nconfigure_ntp() {\n  if ! grep -q time1.google.com /etc/ntp.conf; then\n    cat \u003c\u003cEOF | sudo tee /etc/ntp.conf\n# Our upstream timekeepers; thank you Google\nserver time1.google.com iburst\nserver time2.google.com iburst\nserver time3.google.com iburst\nserver time4.google.com iburst\n# \"Batten down the hatches!\"\n# see http://support.ntp.org/bin/view/Support/AccessRestrictions\nrestrict default limited kod nomodify notrap nopeer\nrestrict -6 default limited kod nomodify notrap nopeer\nrestrict 127.0.0.0 mask 255.0.0.0\nrestrict -6 ::1\nEOF\n    sudo systemctl enable ntpsec\n    sudo systemctl start ntpsec\n  fi\n}\n\ninstall_sslip_io_dns() {\n  if [ ! -x /usr/bin/sslip.io-dns-server ]; then\n    GOLANG_ARCH=$ARCH\n    GOLANG_ARCH=${GOLANG_ARCH/aarch64/arm64}\n    GOLANG_ARCH=${GOLANG_ARCH/x86_64/amd64}\n    curl -L https://github.com/cunnie/sslip.io/releases/download/3.1.0/sslip.io-dns-server-linux-$GOLANG_ARCH \\\n      -o sslip.io-dns-server\n    sudo install sslip.io-dns-server /usr/bin\n    sudo curl -L https://raw.githubusercontent.com/cunnie/deployments/master/terraform/aws/sslip.io-vm/sslip.io.service \\\n      -o /etc/systemd/system/sslip.io-dns.service\n    sudo systemctl daemon-reload\n    sudo systemctl enable sslip.io-dns\n    sudo systemctl start sslip.io-dns\n  fi\n}\n\ninstall_sslip_io_web() {\n  # Fix \"conflicting server name \"_\" on 0.0.0.0:80, ignored\"\n  if [ -L /etc/nginx/sites-enabled/default ]; then\n    sudo rm /etc/nginx/sites-enabled/default\n    sudo systemctl enable nginx\n    sudo systemctl start nginx\n    if [ ! -d ~/workspace/sslip.io ]; then\n      git clone https://github.com/cunnie/sslip.io.git ~/workspace/sslip.io\n    fi\n  fi\n  HTML_DIR=/var/nginx/sslip.io\n  if [ ! -d $HTML_DIR ]; then\n    sudo mkdir -p $HTML_DIR\n    sudo rsync -avH ~/workspace/sslip.io/k8s/document_root_sslip.io/ $HTML_DIR/\n    sudo chown -R $USER $HTML_DIR\n    sudo chmod -R g+w $HTML_DIR # so I can write acme certificate information\n    sudo curl -L https://raw.githubusercontent.com/cunnie/deployments/master/terraform/aws/sslip.io-vm/sslip.io.nginx.conf \\\n      -o /etc/nginx/conf.d/sslip.io.conf\n    sudo systemctl restart nginx # enable sslip.io HTTP\n    sudo chmod g+rx /var/log/nginx # so I can look at the logs without running sudo\n    sudo chown -R www-data:www-data $HTML_DIR\n  fi\n}\n\ndelete_adminuser() {\n  if grep -q ^adminuser: /etc/passwd; then\n    sudo deluser --remove-home adminuser\n  fi\n}\n\ninstall_tls() {\n  TLS_DIR=/etc/pki/nginx\n  if [ ! -d $TLS_DIR ]; then\n    HTML_DIR=/var/nginx/sslip.io\n    sudo chown -R $USER $HTML_DIR\n    PUBLIC_IPV4=$(dig @ns.sslip.io ip.sslip.io TXT +short -4 | tr -d \\\")\n    PUBLIC_IPV4_DASHES=${PUBLIC_IPV4//./-}\n    curl https://get.acme.sh | sh -s email=brian.cunnie@gmail.com\n    ~/.acme.sh/acme.sh \\\n      --issue \\\n      -d $PUBLIC_IPV4.sslip.io \\\n      -d $PUBLIC_IPV4_DASHES.sslip.io \\\n      --server    https://acme-v02.api.letsencrypt.org/directory \\\n      --keylength ec-256  \\\n      --log \\\n      -w /var/nginx/sslip.io || true # it'll fail \u0026 exit if the cert's already issued, but we don't want to exit\n    sudo mkdir -p $TLS_DIR\n    sudo chown -R $USER $TLS_DIR\n    mkdir -p $TLS_DIR/private/\n    touch $TLS_DIR/server.crt $TLS_DIR/private/server.key\n    chmod -R g+w $TLS_DIR\n    chmod -R o-rwx $TLS_DIR/private\n    sudo chown -R $USER $HTML_DIR\n    ~/.acme.sh/acme.sh \\\n      --install-cert \\\n      -d $PUBLIC_IPV4.sslip.io \\\n      -d $PUBLIC_IPV4_DASHES.sslip.io \\\n      --ecc \\\n      --key-file       $TLS_DIR/private/server.key  \\\n      --fullchain-file $TLS_DIR/server.crt \\\n      --server         https://acme-v02.api.letsencrypt.org/directory \\\n      --reloadcmd      \"sudo systemctl restart nginx\" \\\n      --log\n    sudo chown -R www-data:www-data $TLS_DIR $HTML_DIR\n    # Now that we have a cert we can safely load nginx's HTTPS configuration\n    sudo curl -L https://raw.githubusercontent.com/cunnie/deployments/master/terraform/aws/sslip.io-vm/sslip.io-https.nginx.conf \\\n      -o /etc/nginx/conf.d/sslip.io-https.conf\n    sudo systemctl restart nginx # enable sslip.io HTTPS\n  fi\n}\n\ninstall_docker() {\n  # https://docs.docker.com/engine/install/ubuntu/\n  if [ ! -x /usr/bin/docker ]; then\n    sudo apt-get install \\\n      ca-certificates \\\n      curl \\\n      gnupg \\\n      lsb-release\n    sudo mkdir -p /etc/apt/keyrings\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n    echo \\\n      \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n      $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null\n    sudo apt-get update\n    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\n    sudo adduser cunnie docker\n  fi\n}\n\nid # Who am I? for debugging purposes\nSTART_TIME=$(date +%s)\nARCH=$(uname -i)\nexport HOSTNAME=$(hostname)\ninstall_packages\nconfigure_sudo\ncreate_user_cunnie\nuse_pacific_time\ndisable_selinux\nrsyslog_ignores_sslip\n\nif id -u cunnie \u0026\u0026 [ $(id -u) == $(id -u cunnie) ]; then\n  configure_git\n  mkdir -p $HOME/workspace # sometimes run as root via terraform user_data, no HOME\n  configure_zsh          # needs to come before install steps that modify .zshrc\n  install_chruby\n  install_fly_cli\n  install_aws_cli\n  install_zsh_autosuggestions\n  install_docker\n  configure_direnv\n  configure_ntp\n  install_sslip_io_dns\n  install_sslip_io_web # installs HTTP only\n  install_tls # gets certs \u0026 updates nginx to include HTTPS\n  delete_adminuser # Azure cloud-init leaves an adminuser; delete it because passwd is in public .tfstate\nfi\necho \"It took $(( $(date +%s) - START_TIME )) seconds to run\"\n",
                "content_type": "text/x-shellscript",
                "filename": "cloud-init",
                "merge_type": ""
              }
            ],
            "rendered": "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"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "azurerm_linux_virtual_machine",
      "name": "sslip_io",
      "provider": "provider[\"registry.terraform.io/hashicorp/azurerm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "additional_capabilities": [],
            "admin_password": "Aa1_5g8PFBVI",
            "admin_ssh_key": [],
            "admin_username": "adminuser",
            "allow_extension_operations": true,
            "availability_set_id": "",
            "boot_diagnostics": [
              {
                "storage_account_uri": "https://sslipio.blob.core.windows.net/"
              }
            ],
            "computer_name": "ns-azure.sslip.io",
            "custom_data": "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",
            "dedicated_host_group_id": "",
            "dedicated_host_id": "",
            "disable_password_authentication": false,
            "encryption_at_host_enabled": false,
            "eviction_policy": "",
            "extensions_time_budget": "PT1H30M",
            "id": "/subscriptions/a1ac8d5a-7a97-4ed5-bfd1-d7822e19cae9/resourceGroups/sslip.io/providers/Microsoft.Compute/virtualMachines/ns-azure.sslip.io",
            "identity": [],
            "license_type": "",
            "location": "southeastasia",
            "max_bid_price": -1,
            "name": "ns-azure.sslip.io",
            "network_interface_ids": [
              "/subscriptions/a1ac8d5a-7a97-4ed5-bfd1-d7822e19cae9/resourceGroups/sslip.io/providers/Microsoft.Network/networkInterfaces/sslip.io"
            ],
            "os_disk": [
              {
                "caching": "ReadWrite",
                "diff_disk_settings": [],
                "disk_encryption_set_id": "",
                "disk_size_gb": 30,
                "name": "sslip.io",
                "storage_account_type": "Standard_LRS",
                "write_accelerator_enabled": false
              }
            ],
            "patch_mode": "ImageDefault",
            "plan": [],
            "platform_fault_domain": -1,
            "priority": "Regular",
            "private_ip_address": "10.11.0.4",
            "private_ip_addresses": [
              "10.11.0.4",
              "fc00:11::4"
            ],
            "provision_vm_agent": true,
            "proximity_placement_group_id": "",
            "public_ip_address": "52.187.42.158",
            "public_ip_addresses": [
              "52.187.42.158"
            ],
            "resource_group_name": "sslip.io",
            "secret": [],
            "secure_boot_enabled": false,
            "size": "Standard_B1s",
            "source_image_id": "",
            "source_image_reference": [
              {
                "offer": "ubuntu-24_04-lts",
                "publisher": "Canonical",
                "sku": "server",
                "version": "latest"
              }
            ],
            "tags": null,
            "timeouts": null,
            "user_data": "",
            "virtual_machine_id": "d595db88-332b-4620-be5d-d85ff1009dcc",
            "virtual_machine_scale_set_id": "",
            "vtpm_enabled": false,
            "zone": ""
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNzAwMDAwMDAwMDAwLCJkZWxldGUiOjI3MDAwMDAwMDAwMDAsInJlYWQiOjMwMDAwMDAwMDAwMCwidXBkYXRlIjoyNzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "data.cloudinit_config.sslip_io"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
