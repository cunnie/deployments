{
  "version": 4,
  "terraform_version": "1.1.3",
  "serial": 112,
  "lineage": "5ac25dfb-852e-1ed4-aa12-8351dbf9487c",
  "outputs": {
    "admin_password": {
      "value": "Aa1_e3Eyt65Z",
      "type": "string"
    },
    "public_ip": {
      "value": "52.187.42.158",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "template_cloudinit_config",
      "name": "sslip_io",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": true,
            "gzip": true,
            "id": "1622687894",
            "part": [
              {
                "content": "#!/bin/bash -x\n\n# This script is meant to be an idempotent script (you can run it multiple\n# times in a row).\n\n# This script is meant to be run by the root user (via Azure's cloud-init /\n# terraform's custom_data) with no ssh key, no USER or HOME variable, and also\n# be run by user cunnie, with ssh keys and environment variables set.\n\n# Output is in /var/log/cloud-init-output.log\n\nset -xeu -o pipefail\n\ninstall_packages() {\n  sudo apt-get update\n  export DEBIAN_FRONTEND=noninteractive\n  sudo apt-get -y upgrade\n  sudo apt-get remove -y chrony || true\n  sudo apt-get install -y \\\n    build-essential \\\n    direnv \\\n    etcd \\\n    fasd \\\n    fd-find \\\n    golang \\\n    lastpass-cli \\\n    neovim \\\n    nginx \\\n    ntpsec \\\n    silversearcher-ag \\\n    socat \\\n    tcpdump \\\n    tree \\\n    unzip \\\n    zsh \\\n    zsh-syntax-highlighting \\\n\n  if ! grep grml /etc/apt/sources.list; then\n    echo \"deb     http://deb.grml.org/ grml-stable  main\" | sudo tee -a /etc/apt/sources.list\n    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 21E0CA38EA2EA4AB\n    sudo apt-get update\n    sudo apt-get install -y \\\n\t    zsh-lovers\n  fi\n}\n\ncreate_user_cunnie() {\n  if ! id cunnie; then\n    sudo adduser \\\n      --shell=/usr/bin/zsh \\\n      --gecos=\"Brian Cunnie\" \\\n      --disabled-password \\\n      cunnie\n    for GROUP in root adm sudo www-data; do\n      sudo adduser cunnie $GROUP\n    done\n    echo \"cunnie ALL=(ALL) NOPASSWD:ALL\" | sudo tee /etc/sudoers.d/99-cunnie\n    sudo mkdir ~cunnie/.ssh\n    echo \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIWiAzxc4uovfaphO0QVC2w00YmzrogUpjAzvuqaQ9tD cunnie@nono.io \" | sudo tee -a ~cunnie/.ssh/authorized_keys\n    ssh-keyscan github.com | sudo tee -a ~cunnie/.ssh/known_hosts\n    sudo touch ~cunnie/.zshrc\n    sudo chmod -R go-rwx ~cunnie/.ssh\n    sudo git clone https://github.com/cunnie/bin.git ~cunnie/bin\n    sudo chown -R cunnie:cunnie ~cunnie\n  fi\n}\n\ninstall_chruby() {\n  if [ ! -d /usr/local/share/chruby ] ; then\n    wget -O ruby-install-0.8.3.tar.gz \\\n      https://github.com/postmodern/ruby-install/archive/v0.8.3.tar.gz\n    tar -xzvf ruby-install-0.8.3.tar.gz\n    cd ruby-install-0.8.3/\n    sudo make install\n\n    wget -O chruby-0.3.9.tar.gz https://github.com/postmodern/chruby/archive/v0.3.9.tar.gz\n    tar -xzvf chruby-0.3.9.tar.gz\n    cd chruby-0.3.9/\n    sudo make install\n    cat \u003e\u003e $HOME/.zshrc \u003c\u003cEOF\n\nsource /usr/local/share/chruby/chruby.sh\nsource /usr/local/share/chruby/auto.sh\nEOF\n  fi\n}\n\ninstall_fly_cli() {\n  if [ ! -x /usr/local/bin/fly ]; then\n    curl -s -o /tmp/fly 'https://ci.nono.io/api/v1/cli?arch=amd64\u0026platform=linux'\n    sudo install /tmp/fly /usr/local/bin\n    sudo chmod a+w /usr/local/bin\n  fi\n}\n\ninstall_luan_nvim() {\n  if [ ! -d $HOME/.config/nvim ]; then\n    git clone https://github.com/luan/nvim $HOME/.config/nvim\n  else\n    echo \"skipping Luan's config; it's already installed\"\n  fi\n  # fix \"missing dependencies (fd)!\"\n  if [ ! -L /usr/bin/fd ]; then\n    sudo ln -s /usr/bin/fdfind /usr/bin/fd\n  fi\n}\n\ninstall_terraform() {\n  if [ ! -x /usr/local/bin/terraform ]; then\n    curl -o tf.zip -L https://releases.hashicorp.com/terraform/0.14.7/terraform_0.14.7_linux_amd64.zip\n    unzip tf.zip\n    sudo install terraform /usr/local/bin/\n  fi\n}\n\ninstall_aws_cli() {\n  if [ ! -x /usr/local/bin/aws ]; then\n    # From https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html\n    curl \"https://awscli.amazonaws.com/awscli-exe-linux-${ARCH}.zip\" -o \"awscliv2.zip\"\n    unzip awscliv2.zip\n    sudo ./aws/install\n  fi\n}\n\ninstall_zsh_autosuggestions() {\n  if [ ! -d $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions ]; then\n      git clone https://github.com/zsh-users/zsh-autosuggestions $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions\n      sed -i 's/^plugins=(/\u0026zsh-autosuggestions /' $HOME/.zshrc\n  fi\n}\n\nconfigure_direnv() {\n  if ! grep -q \"direnv hook zsh\" $HOME/.zshrc; then\n    echo 'eval \"$(direnv hook zsh)\"' \u003e\u003e $HOME/.zshrc\n    eval \"$(direnv hook bash)\"\n  fi\n  for envrc in $(find \"$HOME/workspace\" -maxdepth 2 -name '.envrc' -print); do\n    pushd $(dirname $envrc)\n      direnv allow\n    popd\n  done\n}\n\nconfigure_zsh() {\n  if [ ! -d $HOME/.oh-my-zsh ]; then\n    sudo chsh -s /usr/bin/zsh $USER\n    echo \"\" | SHELL=/usr/bin/zsh zsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n    sed -i 's/robbyrussell/agnoster/' $HOME/.zshrc\n    echo 'eval \"$(fasd --init posix-alias zsh-hook)\"' \u003e\u003e $HOME/.zshrc\n    echo 'export EDITOR=nvim' \u003e\u003e $HOME/.zshrc\n  fi\n}\n\nuse_pacific_time() {\n  sudo timedatectl set-timezone America/Los_Angeles\n}\n\ndisable_selinux() {\n  # does not take effect until reboot, and we can't reboot halfway through the script\n  # because we can't easily pick up where we left off\n  if grep -q SELINUX=enforcing /etc/selinux/config; then\n    printf \"disabling SELINUX and firewall\"\n    sudo sed -i 's/^SELINUX=enforcing$/SELINUX=disabled/' /etc/selinux/config\n    # The following really, truly disables selinux\n    sudo grubby --update-kernel ALL --args selinux=0\n  fi\n}\n\nconfigure_git() {\n  # https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases\n  git config --global user.name \"Brian Cunnie\"\n  git config --global user.email brian.cunnie@gmail.com\n  git config --global alias.co checkout\n  git config --global alias.ci commit\n  git config --global alias.st status\n  git config --global color.branch auto\n  git config --global color.diff auto\n  git config --global color.status auto\n  git config --global core.editor nvim\n  git config --global url.\"git@github.com:\".insteadOf \"https://github.com/\"\n\n  mkdir -p $HOME/workspace # where we typically clone our repos\n}\n\nconfigure_sudo() {\n  sudo sed -i 's/# %wheel/%wheel/' /etc/sudoers\n}\n\nconfigure_tmux() {\n  # https://github.com/luan/tmuxfiles, to clear, `rm -rf ~/.tmux.conf ~/.tmux`\n  if [ ! -f $HOME/.tmux.conf ]; then\n    echo \"WARNING: If this scripts fails with \\\"unknown variable: TMUX_PLUGIN_MANAGER_PATH\\\"\"\n    echo \"If you don't have an ugly magenta bottom of your tmux screen, if nvim is unusable, then\"\n    echo \"you may need to run this command to completely install tmux configuration:\"\n    echo \"zsh -c \\\"\\$(curl -fsSL https://raw.githubusercontent.com/luan/tmuxfiles/master/install)\\\"\"\n    bash -c \"$(curl -fsSL https://raw.githubusercontent.com/luan/tmuxfiles/master/install)\"\n  fi\n}\n\nconfigure_ntp() {\n  if ! grep -q time1.google.com /etc/ntp.conf; then\n    cat \u003c\u003cEOF | sudo tee /etc/ntp.conf\n# Our upstream timekeepers; thank you Google\nserver time1.google.com iburst\nserver time2.google.com iburst\nserver time3.google.com iburst\nserver time4.google.com iburst\n# \"Batten down the hatches!\"\n# see http://support.ntp.org/bin/view/Support/AccessRestrictions\nrestrict default limited kod nomodify notrap nopeer\nrestrict -6 default limited kod nomodify notrap nopeer\nrestrict 127.0.0.0 mask 255.0.0.0\nrestrict -6 ::1\nEOF\n    sudo systemctl enable ntpsec\n    sudo systemctl start ntpsec\n  fi\n}\n\ninstall_sslip_io_dns() {\n  if [ ! -x /usr/bin/sslip.io-dns-server ]; then\n    GOLANG_ARCH=${ARCH/aarch64/arm64/}\n    GOLANG_ARCH=${ARCH/x86_64/amd64/}\n    curl -L https://github.com/cunnie/sslip.io/releases/download/2.5.1/sslip.io-dns-server-linux-$GOLANG_ARCH \\\n      -o sslip.io-dns-server\n    sudo install sslip.io-dns-server /usr/bin\n    sudo curl -L https://raw.githubusercontent.com/cunnie/deployments/master/terraform/aws/sslip.io-vm/sslip.io.service \\\n      -o /etc/systemd/system/sslip.io-dns.service\n    sudo systemctl daemon-reload\n    sudo systemctl enable sslip.io-dns\n    sudo systemctl start sslip.io-dns\n  fi\n}\n\ninstall_sslip_io_web() {\n  # Fix \"conflicting server name \"_\" on 0.0.0.0:80, ignored\"\n  if [ -L /etc/nginx/sites-enabled/default ]; then\n    sudo rm /etc/nginx/sites-enabled/default\n    sudo systemctl enable nginx\n    sudo systemctl start nginx\n    if [ ! -d ~/workspace/sslip.io ]; then\n      git clone https://github.com/cunnie/sslip.io.git ~/workspace/sslip.io\n    fi\n  fi\n  HTML_DIR=/var/nginx/sslip.io\n  if [ ! -d $HTML_DIR ]; then\n    sudo mkdir -p $HTML_DIR\n    sudo rsync -avH ~/workspace/sslip.io/k8s/document_root/ $HTML_DIR/\n    sudo chown -R $USER $HTML_DIR\n    sudo chmod -R g+w $HTML_DIR # so I can write acme certificate information\n    sudo curl -L https://raw.githubusercontent.com/cunnie/deployments/master/terraform/aws/sslip.io-vm/sslip.io.nginx.conf \\\n      -o /etc/nginx/conf.d/sslip.io.conf\n    sudo systemctl restart nginx # enable sslip.io HTTP\n    sudo chmod g+rx /var/log/nginx # so I can look at the logs without running sudo\n    sudo chown -R www-data:www-data $HTML_DIR\n  fi\n}\n\ndelete_adminuser() {\n  if grep -q ^adminuser: /etc/passwd; then\n    sudo deluser --remove-home adminuser\n  fi\n}\n\ninstall_tls() {\n  TLS_DIR=/etc/pki/nginx\n  if [ ! -d $TLS_DIR ]; then\n    HTML_DIR=/var/nginx/sslip.io\n    sudo chown -R $USER $HTML_DIR\n    PUBLIC_IPV4=$(dig @ns.sslip.io ip.sslip.io TXT +short -4 | tr -d \\\")\n    PUBLIC_IPV6=$(dig @ns.sslip.io ip.sslip.io TXT +short -6 | tr -d \\\")\n    PUBLIC_IPV4_DASHES=${PUBLIC_IPV4//./-}\n    PUBLIC_IPV6_DASHES=${PUBLIC_IPV6//:/-}\n    curl https://get.acme.sh | sh -s email=brian.cunnie@gmail.com\n    ~/.acme.sh/acme.sh --issue \\\n      -d $PUBLIC_IPV4.sslip.io \\\n      -d $PUBLIC_IPV4_DASHES.sslip.io \\\n      -d $PUBLIC_IPV6_DASHES.sslip.io \\\n      --log \\\n      -w /var/nginx/sslip.io || true # it'll fail \u0026 exit if the cert's already issued, but we don't want to exit\n    sudo mkdir -p $TLS_DIR\n    sudo chown -R $USER $TLS_DIR\n    mkdir -p $TLS_DIR/private/\n    touch $TLS_DIR/server.crt $TLS_DIR/private/server.key\n    chmod -R g+w $TLS_DIR\n    chmod -R o-rwx $TLS_DIR/private\n    sudo chown -R $USER $HTML_DIR\n    ~/.acme.sh/acme.sh --install-cert \\\n      -d $PUBLIC_IPV4.sslip.io \\\n      -d $PUBLIC_IPV4_DASHES.sslip.io \\\n      -d $PUBLIC_IPV6_DASHES.sslip.io \\\n      --key-file       $TLS_DIR/private/server.key  \\\n      --fullchain-file $TLS_DIR/server.crt \\\n      --reloadcmd     \"sudo systemctl restart nginx\" \\\n      --log\n    sudo chown -R www-data:www-data $TLS_DIR $HTML_DIR\n    # Now that we have a cert we can safely load nginx's HTTPS configuration\n    sudo curl -L https://raw.githubusercontent.com/cunnie/deployments/master/terraform/aws/sslip.io-vm/sslip.io-https.nginx.conf \\\n      -o /etc/nginx/conf.d/sslip.io-https.conf\n    sudo systemctl restart nginx # enable sslip.io HTTPS\n  fi\n}\n\nid # Who am I? for debugging purposes\nSTART_TIME=$(date +%s)\nARCH=$(uname -i)\nexport HOSTNAME=$(hostname)\ninstall_packages\nconfigure_sudo\ncreate_user_cunnie\nuse_pacific_time\ndisable_selinux\n\nif id -u cunnie \u0026\u0026 [ $(id -u) == $(id -u cunnie) ]; then\n  configure_git\n  mkdir -p $HOME/workspace # sometimes run as root via terraform user_data, no HOME\n  configure_zsh          # needs to come before install steps that modify .zshrc\n  install_chruby\n  install_fly_cli\n  install_terraform\n  install_aws_cli\n  install_luan_nvim\n  install_zsh_autosuggestions\n  configure_direnv\n  configure_tmux\n  configure_ntp\n  install_sslip_io_dns\n  install_sslip_io_web # installs HTTP only\n  # install_tls # gets certs \u0026 updates nginx to include HTTPS\n  delete_adminuser # Azure cloud-init leaves an adminuser; delete it because passwd is in public .tfstate\nfi\necho \"It took $(( $(date +%s) - START_TIME )) seconds to run\"\n",
                "content_type": "text/x-shellscript",
                "filename": "cloud-init",
                "merge_type": ""
              }
            ],
            "rendered": "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"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "azurerm_linux_virtual_machine",
      "name": "sslip_io",
      "provider": "provider[\"registry.terraform.io/hashicorp/azurerm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "additional_capabilities": [],
            "admin_password": "Aa1_e3Eyt65Z",
            "admin_ssh_key": [],
            "admin_username": "adminuser",
            "allow_extension_operations": true,
            "availability_set_id": "",
            "boot_diagnostics": [
              {
                "storage_account_uri": "https://sslipio.blob.core.windows.net/"
              }
            ],
            "computer_name": "ns-azure.sslip.io",
            "custom_data": "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",
            "dedicated_host_group_id": "",
            "dedicated_host_id": "",
            "disable_password_authentication": false,
            "encryption_at_host_enabled": false,
            "eviction_policy": "",
            "extensions_time_budget": "PT1H30M",
            "id": "/subscriptions/a1ac8d5a-7a97-4ed5-bfd1-d7822e19cae9/resourceGroups/sslip.io/providers/Microsoft.Compute/virtualMachines/ns-azure.sslip.io",
            "identity": [],
            "license_type": "",
            "location": "southeastasia",
            "max_bid_price": -1,
            "name": "ns-azure.sslip.io",
            "network_interface_ids": [
              "/subscriptions/a1ac8d5a-7a97-4ed5-bfd1-d7822e19cae9/resourceGroups/sslip.io/providers/Microsoft.Network/networkInterfaces/sslip.io"
            ],
            "os_disk": [
              {
                "caching": "ReadWrite",
                "diff_disk_settings": [],
                "disk_encryption_set_id": "",
                "disk_size_gb": 30,
                "name": "sslip.io",
                "storage_account_type": "Standard_LRS",
                "write_accelerator_enabled": false
              }
            ],
            "patch_mode": "ImageDefault",
            "plan": [],
            "platform_fault_domain": -1,
            "priority": "Regular",
            "private_ip_address": "10.11.0.4",
            "private_ip_addresses": [
              "10.11.0.4",
              "fc00:11::4"
            ],
            "provision_vm_agent": true,
            "proximity_placement_group_id": "",
            "public_ip_address": "52.187.42.158",
            "public_ip_addresses": [
              "52.187.42.158"
            ],
            "resource_group_name": "sslip.io",
            "secret": [],
            "secure_boot_enabled": false,
            "size": "Standard_B1s",
            "source_image_id": "",
            "source_image_reference": [
              {
                "offer": "0001-com-ubuntu-server-impish",
                "publisher": "Canonical",
                "sku": "21_10",
                "version": "latest"
              }
            ],
            "tags": null,
            "timeouts": null,
            "user_data": "",
            "virtual_machine_id": "d5f2003c-f142-4b79-8dc7-006eafbb632e",
            "virtual_machine_scale_set_id": "",
            "vtpm_enabled": false,
            "zone": ""
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNzAwMDAwMDAwMDAwLCJkZWxldGUiOjI3MDAwMDAwMDAwMDAsInJlYWQiOjMwMDAwMDAwMDAwMCwidXBkYXRlIjoyNzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "data.template_cloudinit_config.sslip_io"
          ]
        }
      ]
    }
  ]
}
